{"version":3,"sources":["../../src/controllers/userController.js"],"names":["login","req","res","email","body","userName","userModel","findOne","err","user","status","json","message","error","password","role","list","find","users","show","id","params","_id","create","nickname","save","update","remove","findByIdAndRemove"],"mappings":"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","file":"userController.js","sourcesContent":["import userModel from \"../models/userModel.js\";\n\n/**\n * userController.js\n *\n * @description :: Server-side logic for managing users.\n */\nexport default {\n  /**\n   * userController.login()\n   */\n  login(req, res) {\n    const email = req.body.userName;\n    userModel.findOne({ email }, (err, user) => {\n      if (err) {\n        return res.status(500).json({\n          message: \"Error when getting user.\",\n          error: err\n        });\n      }\n      if (!user) {\n        return res.status(404).json({\n          message: \"No such user\"\n        });\n      }\n      if (user.password === req.body.password) {\n        return res.status(201).json(`success ${user.role} ${user.email}`);\n      } else {\n        return res.status(401).json(\"password error\");\n      }\n    });\n  },\n  /**\n   * userController.list()\n   */\n  list(req, res) {\n    userModel.find((err, users) => {\n      if (err) {\n        return res.status(500).json({\n          message: \"Error when getting user.\",\n          error: err\n        });\n      }\n      return res.json(users);\n    });\n  },\n\n  /**\n   * userController.show()\n   */\n  show(req, res) {\n    const id = req.params.id;\n    userModel.findOne({ _id: id }, (err, user) => {\n      if (err) {\n        return res.status(500).json({\n          message: \"Error when getting user.\",\n          error: err\n        });\n      }\n      if (!user) {\n        return res.status(404).json({\n          message: \"No such user\"\n        });\n      }\n      return res.json(user);\n    });\n  },\n\n  /**\n   * userController.create()\n   */\n  create(req, res) {\n    const user = new userModel({\n      email: req.body.email,\n      password: req.body.password,\n      nickname: req.body.nickname,\n      role: req.body.role\n    });\n\n    user.save((err, user) => {\n      if (err) {\n        return res.status(500).json({\n          message: \"Error when creating user\",\n          error: err\n        });\n      }\n      return res.status(201).json(user);\n    });\n  },\n\n  /**\n   * userController.update()\n   */\n  update(req, res) {\n    const id = req.params.id;\n    userModel.findOne({ _id: id }, (err, user) => {\n      if (err) {\n        return res.status(500).json({\n          message: \"Error when getting user\",\n          error: err\n        });\n      }\n      if (!user) {\n        return res.status(404).json({\n          message: \"No such user\"\n        });\n      }\n\n      user.email = req.body.email ? req.body.email : user.email;\n      user.password = req.body.password ? req.body.password : user.password;\n      user.nickname = req.body.nickname ? req.body.nickname : user.nickname;\n      user.role = req.body.role ? req.body.role : user.role;\n\n      user.save((err, user) => {\n        if (err) {\n          return res.status(500).json({\n            message: \"Error when updating user.\",\n            error: err\n          });\n        }\n\n        return res.json(user);\n      });\n    });\n  },\n\n  /**\n   * userController.remove()\n   */\n  remove(req, res) {\n    const id = req.params.id;\n    userModel.findByIdAndRemove(id, (err, user) => {\n      if (err) {\n        return res.status(500).json({\n          message: \"Error when deleting the user.\",\n          error: err\n        });\n      }\n      return res.status(204).json();\n    });\n  }\n};\n"]}