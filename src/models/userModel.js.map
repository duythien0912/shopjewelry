{"version":3,"sources":["../../src/models/userModel.js"],"names":["Schema","mongoose","userSchema","email","type","String","lowercase","unique","required","match","index","password","nickname","role","default","userModel","model","emailAdmin","process","env","ADMIN_EMAIL","findOne","err","user","console","log","ADMIN_PASSWORD","save"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AACA,IAAMA,SAASC,mBAASD,MAAxB;;AAEA,IAAME,aAAa,IAAIF,MAAJ,CAAW;AAC5BG,SAAO;AACLC,UAAMC,MADD;AAELC,eAAW,IAFN;AAGLC,YAAQ,IAHH;AAILC,cAAU,CAAC,IAAD,EAAO,gBAAP,CAJL;AAKLC,WAAO,CAAC,cAAD,EAAiB,YAAjB,CALF;AAMLC,WAAO;AANF,GADqB;AAS5BC,YAAUN,MATkB;AAU5BO,YAAUP,MAVkB;AAW5BQ,QAAM,EAAET,MAAMC,MAAR,EAAgBS,SAAS,MAAzB;AAXsB,CAAX,CAAnB;AAaA,IAAMC,YAAYd,mBAASe,KAAT,CAAe,MAAf,EAAuBd,UAAvB,CAAlB;;AAEA,IAAMe,aAAaC,QAAQC,GAAR,CAAYC,WAAZ,IAA2B,iBAA9C;;AAEAL,UAAUM,OAAV,CAAkB,EAAE,SAASJ,UAAX,EAAlB,EAA2C,UAACK,GAAD,EAAMC,IAAN,EAAe;;AAExD,MAAID,GAAJ,EAAS;AACPE,YAAQC,GAAR,CAAY,OAAZ,EAAqBH,GAArB;AACD,GAFD,MAEO;AACP,QAAI,CAACC,IAAL,EAAW;AACT,UAAIA,OAAO,IAAIR,SAAJ,CAAc;AACvBZ,eAAOe,QAAQC,GAAR,CAAYC,WAAZ,IAA2B,iBADX;AAEvBT,kBAAUO,QAAQC,GAAR,CAAYO,cAAZ,IAA8B,kBAFjB;AAGvBd,kBAAU,OAHa;AAIvBC,cAAM;AAJiB,OAAd,CAAX;;AAOAU,WAAKI,IAAL,CAAU,UAACL,GAAD,EAAMC,IAAN,EAAe;AACvB,YAAID,GAAJ,EAAS;AACPE,kBAAQC,GAAR,CAAY,gCAAZ,EAA8CH,GAA9C;AACD;AACDE,gBAAQC,GAAR,CAAY,qBAAZ,EAAmCF,KAAKpB,KAAxC,EAA+CoB,KAAKZ,QAApD;AACD,OALD;AAMD,KAdD,MAcO;AACPa,cAAQC,GAAR,CAAY,iBAAZ,EAA+BF,KAAKpB,KAApC,EAA2C,QAA3C,EAAqDoB,KAAKZ,QAA1D;AACE;AACD;AACF,CAvBD;;kBAyBeI,S","file":"userModel.js","sourcesContent":["import uuidv4 from \"uuid/v4\";\nimport mongoose from \"mongoose\";\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  email: {\n    type: String,\n    lowercase: true,\n    unique: true,\n    required: [true, \"can't be blank\"],\n    match: [/\\S+@\\S+\\.\\S+/, \"is invalid\"],\n    index: true\n  },\n  password: String,\n  nickname: String,\n  role: { type: String, default: \"user\" }\n});\nconst userModel = mongoose.model(\"user\", userSchema);\n\nconst emailAdmin = process.env.ADMIN_EMAIL || \"admin@gmail.com\";\n\nuserModel.findOne({ \"email\": emailAdmin }, (err, user) => {\n\n  if (err) {\n    console.log(\"Error\", err);\n  } else {\n  if (!user) {\n    var user = new userModel({\n      email: process.env.ADMIN_EMAIL || \"admin@gmail.com\",\n      password: process.env.ADMIN_PASSWORD || uuidv4(),\n      nickname: \"admin\",\n      role: \"admin\"\n    });\n\n    user.save((err, user) => {\n      if (err) {\n        console.log(\"Error create new Admin account\", err);\n      }\n      console.log(\"New Admin account: \", user.email, user.password);\n    });\n  } else {\n  console.log(\"Admin account: \", user.email, \"pass: \", user.password);\n   }\n  };\n});\n\nexport default userModel;\n"]}